#!/bin/bash


PROGRAM=$(basename $0)


sub_help() {
  echo "Usage: ${PROGRAM} <subcommand> [options]"
  echo "Subcommands:"
  echo "    build - invoke cmake/make to build the code"
  echo "    clean - clean things up"
  echo "    deb - build a debian package"
  echo "    coverage - run the system test suite and collect coverage data"
  echo "    docker - build a docker image named gallocy-example"
  echo "    integration - run the system test suite"
  echo "    leakcheck - run the unit test suite under valgrind"
  echo "    stylecheck - run the style checker"
  echo "    test - run the unit test suite"
}


sub_build() {
  if [ ! -f "Makefile" ]; then
    echo "Running build with GENERATE_COVERAGE=${GENERATE_COVERAGE}"
    cmake -G "Unix Makefiles"  \
      -DBUILD_CURL_EXE=OFF     \
      -DBUILD_CURL_TESTS=OFF   \
      -DCMAKE_USE_LIBSSH2=OFF  \
      -DCMAKE_USE_OPENLDAP=OFF \
      -DCMAKE_USE_OPENSSL=OFF  \
      -DCURL_ZLIB=OFF          \
      -DHTTP_ONLY=ON           \
      -DGENERATE_COVERAGE="${GENERATE_COVERAGE:-OFF}" \
      || exit 1
  fi
  make || exit 1
  make install || exit 1
  sub_stylecheck || exit 1
  sub_test || exit 1
}


sub_clean() {
  git clean -fxd --exclude cthulhu-fixture
}


sub_test() {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    LIBRARY_PATH="LD_LIBRARY_PATH"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIBRARY_PATH="DYLD_LIBRARY_PATH"
  fi

  INSTALL_PATH="$(pwd)/install"

  export ${LIBRARY_PATH}="${INSTALL_PATH}/lib"
  ${INSTALL_PATH}/bin/gallocy_tests 2>/dev/null
}


sub_integration() {
  BATS=./tools/bats/bin/bats

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    LIBRARY_PATH="LD_LIBRARY_PATH"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIBRARY_PATH="DYLD_LIBRARY_PATH"
  fi

  INSTALL_PATH="$(pwd)/install"

  export ${LIBRARY_PATH}="${INSTALL_PATH}/lib"
  ${BATS} ./integration/test.sh
}


sub_coverage() {
  if [ ! -f "Makefile" ]; then
    cmake -G "Unix Makefiles"  \
      -DBUILD_CURL_EXE=OFF     \
      -DBUILD_CURL_TESTS=OFF   \
      -DCMAKE_USE_LIBSSH2=OFF  \
      -DCMAKE_USE_OPENLDAP=OFF \
      -DCMAKE_USE_OPENSSL=OFF  \
      -DCURL_ZLIB=OFF          \
      -DHTTP_ONLY=ON           \
      -DGENERATE_COVERAGE=ON   \
      || exit 1
  fi
  make clean
  make || exit 1
  make install || exit 1
  make gallocy_coverage || exit 1
}


sub_leakcheck() {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    LIBRARY_PATH="LD_LIBRARY_PATH"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIBRARY_PATH="DYLD_LIBRARY_PATH"
  fi

  INSTALL_PATH="$(pwd)/install"

  export ${LIBRARY_PATH}="${INSTALL_PATH}/lib"
  valgrind \
    --leak-check=full \
    --show-leak-kinds=all \
    ${INSTALL_PATH}/bin/gallocy_tests \
      --gtest_filter="-ThreadsTest.*"
}


sub_stylecheck() {
  LINT_ARGS=(
    "--root=gallocy/include"
    "--linelength=160"
    "--filter=-legal/copyright,-runtime/references,-build/c++11"
    )
  echo "Using http://google.github.io/styleguide/cppguide.html as guide..."
  if [ "$1" = "" ]; then
    find gallocy \
      -path gallocy/external -prune -o \
      -type f -regex ".*\.\(cpp\|h\)$" \
      -exec ./tools/cpplint.py ${LINT_ARGS[*]} {} +
  else
    ./tools/cpplint.py ${LINT_ARGS[*]} $1
  fi
}


sub_docker() {
  sub_build

  RUNNING_CONTAINERS=$(docker ps -q)
  if [ "$RUNNING_CONTAINERS" != "" ]; then
    OUT="$(docker stop -t 1 $RUNNING_CONTAINERS)"
  fi

  OLD_CONTAINERS="$(docker ps -a -q)"
  if [ "$OLD_CONTAINERS" != "" ]; then
    OUT="$(docker rm $OLD_CONTAINERS)"
  fi

  OLD_IMAGES="$(docker images -q)"
  if [ "$OLD_IMAGES" != "" ]; then
    OUT="$(docker rmi $OLD_IMAGES)"
  fi

  docker build -t gallocy-example -f tools/Dockerfile .
}


sub_deb() {
  sub_build
  IFS='.' read -ra VERSION <<< "$(cat VERSION)"
  DEB_VERSION="${VERSION[0]}.${VERSION[1]}-${VERSION[2]}"
  DEB_ROOT="gallocy_$DEB_VERSION"
  mkdir "$DEB_ROOT"
  mkdir -p "$DEB_ROOT/opt/gallocy/bin"
  mkdir -p "$DEB_ROOT/opt/gallocy/lib"
  cp ./gallocy/build/bin/* "$DEB_ROOT/opt/gallocy/bin"
  cp ./gallocy/build/lib/* "$DEB_ROOT/opt/gallocy/lib"
  mkdir -p "$DEB_ROOT/DEBIAN"
  echo "Package: gallocy" >> "$DEB_ROOT/DEBIAN/control"
  echo "Version: $DEB_VERSION" >> "$DEB_ROOT/DEBIAN/control"
  echo "Section: base" >> "$DEB_ROOT/DEBIAN/control"
  echo "Priority: optional" >> "$DEB_ROOT/DEBIAN/control"
  echo "Architecture: x64" >> "$DEB_ROOT/DEBIAN/control"
  echo "Depends: " >> "$DEB_ROOT/DEBIAN/control"
  echo "Maintainer: Stephen Holsapple <sholsapp@gmail.com>" >> "$DEB_ROOT/DEBIAN/control"
  echo "Description: The gallocy server." >> "$DEB_ROOT/DEBIAN/control"
  dpkg-deb --build "$DEB_ROOT"
  dpkg -c "$DEB_ROOT.deb"
}


SUBCOMMAND=$1
case $SUBCOMMAND in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${SUBCOMMAND} $@
    if [ $? = 127 ]; then
      echo "Error: '$SUBCOMMAND' is not a known subcommand." >&2
      exit 1
    fi
    ;;
esac
