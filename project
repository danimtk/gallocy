#!/bin/bash


PROGRAM=$(basename $0)


sub_help() {
  echo "Usage: ${PROGRAM} <subcommand> [options]"
  echo "Subcommands:"
  echo "    build - invoke cmake/make to build the code"
  echo "    clean - clean things up"
  echo "    docker - build a docker"
  echo "    fuckit - seriously, clean everything up"
  echo "    integration - run the system test suite"
  echo "    stylecheck - run the style checker"
  echo "    test - run the unit test suite"
}


sub_build() {
  if [ ! -f "Makefile" ]; then
    cmake -G "Unix Makefiles" || exit 1
  fi
  make || exit 1
  make install || exit 1
  #sub_stylecheck || exit 1
  sub_test || exit 1
}


sub_clean() {
  make clean
}


sub_fuckit() {
  git clean -fxd
}


sub_test() {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    LIBRARY_PATH="LD_LIBRARY_PATH"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIBRARY_PATH="DYLD_LIBRARY_PATH"
  fi

  INSTALL_PATH="$(pwd)/install"

  export ${LIBRARY_PATH}="${INSTALL_PATH}/lib"
  ${INSTALL_PATH}/bin/gallocy_tests
}


sub_integration() {
  BATS=./tools/bats/bin/bats

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    LIBRARY_PATH="LD_LIBRARY_PATH"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIBRARY_PATH="DYLD_LIBRARY_PATH"
  fi

  INSTALL_PATH="$(pwd)/install"

  export ${LIBRARY_PATH}="${INSTALL_PATH}/lib"
  ${BATS} ./integration/test.sh
}


sub_stylecheck() {
  LINT_ARGS=(
    "--root=gallocy"
    "--linelength=160"
    "--filter=-legal/copyright,-runtime/references"
    )
  echo "Using http://google.github.io/styleguide/cppguide.html as guide..."
  if [ "$1" = "" ]; then
    find gallocy \
      -path gallocy/external -prune -o \
      -type f -regex ".*\.\(cpp\|h\)$" \
      -exec ./tools/cpplint.py ${LINT_ARGS[*]} {} +
  else
    ./tools/cpplint.py ${LINT_ARGS[*]} $1
  fi
}


sub_docker() {
  sub_build

  RUNNING_CONTAINERS=$(docker ps -q)
  if [ "$RUNNING_CONTAINERS" != "" ]; then
    OUT="$(docker stop $RUNNING_CONTAINERS)"
  fi

  OLD_CONTAINERS="$(docker ps -a -q)"
  if [ "$OLD_CONTAINERS" != "" ]; then
    OUT="$(docker rm $OLD_CONTAINERS)"
  fi

  OLD_IMAGES="$(docker images -q)"
  if [ "$OLD_IMAGES" != "" ]; then
    OUT="$(docker rmi $OLD_IMAGES)"
  fi

  docker build -t gallocy-example -f tools/Dockerfile .
}


SUBCOMMAND=$1
case $SUBCOMMAND in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${SUBCOMMAND} $@
    if [ $? = 127 ]; then
      echo "Error: '$SUBCOMMAND' is not a known subcommand." >&2
      exit 1
    fi
    ;;
esac
